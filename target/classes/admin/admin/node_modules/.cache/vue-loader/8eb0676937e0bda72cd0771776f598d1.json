{"remainingRequest":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\jiadianOrder\\list.vue?vue&type=template&id=1e6740a1&scoped=true","dependencies":[{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\jiadianOrder\\list.vue","mtime":1745444742888},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1743781066581},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1743781066581},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1743781066696},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1743781065802},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1743781066581},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1743781065439}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}