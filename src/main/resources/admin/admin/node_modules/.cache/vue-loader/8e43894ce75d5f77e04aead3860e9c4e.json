{"remainingRequest":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\config\\list.vue?vue&type=style&index=0&id=179f742c&prod&scoped=true&lang=css","dependencies":[{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\config\\list.vue","mtime":1745868000789},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1743781065361},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1743781065757},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1743781065333},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1743781066581},{"path":"C:\\jiadianxiaoshoupingtai\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1743781065439}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQovKiDkuLvlhoXlrrnlrrnlmajmoLflvI8gKi8NCi5tYWluLWNvbnRlbnQgew0KICBwYWRkaW5nOiAyMHB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1Ow0KICBtaW4taGVpZ2h0OiBjYWxjKDEwMHZoIC0gODRweCk7DQp9DQoNCi8qIOihqOWNleWGheWuueagt+W8jyAqLw0KLmZvcm0tY29udGVudCB7DQogIHBhZGRpbmc6IDIwcHg7DQogIGJhY2tncm91bmQtY29sb3I6ICNGRkZERjE7DQogIGJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLDAsMCwwLjEpOw0KICBib3JkZXItcmFkaXVzOiA2cHg7DQogIG1hcmdpbi1ib3R0b206IDIwcHg7DQp9DQoNCi8qIOihqOWNleihjOagt+W8jyAqLw0KLmFkIHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0Ow0KfQ0KDQovKiDooajmoLzlhoXlrrnmoLflvI8gKi8NCi50YWJsZS1jb250ZW50IHsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsNCiAgcGFkZGluZzogMjBweDsNCiAgYm9yZGVyLXJhZGl1czogNnB4Ow0KICBib3gtc2hhZG93OiAwIDAgNnB4IHJnYmEoMCwwLDAsMC4xKTsNCn0NCg0KLyog6KGo5qC85qC35byPICovDQoudGFibGVzIHsNCiAgd2lkdGg6IDEwMCU7DQogIGZvbnQtc2l6ZTogMTRweDsNCn0NCg0KLyog6KGo5qC86KGo5aS05qC35byPICovDQoudGFibGVzID4+PiAuZWwtdGFibGVfX2hlYWRlciB0aCB7DQogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXB1YmxpY1N1YkNvbG9yKTsNCiAgY29sb3I6ICNmZmYgIWltcG9ydGFudDsNCiAgZm9udC13ZWlnaHQ6IGJvbGQ7DQp9DQoNCi8qIOihqOagvOWlh+aVsOihjOagt+W8jyAqLw0KLnRhYmxlcyA+Pj4gLmVsLXRhYmxlX19ib2R5IHRyOm50aC1jaGlsZChvZGQpIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxODQsIDIzMCwgMjUzLCAwLjc4KTsNCn0NCg0KLyog6KGo5qC86KGM5oKs5YGc5qC35byPICovDQoudGFibGVzID4+PiAuZWwtdGFibGVfX2JvZHkgdHI6aG92ZXIgdGQgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wdWJsaWNTdWJDb2xvcikgIWltcG9ydGFudDsNCiAgY29sb3I6ICMzMzMgIWltcG9ydGFudDsNCn0NCg0KLyog6KGo5qC85Y2V5YWD5qC85qC35byPICovDQoudGFibGVzID4+PiAuZWwtdGFibGVfX2JvZHkgdGQgew0KICBwYWRkaW5nOiA4cHggMDsNCn0NCg0KLyog5oiQ5Yqf5oyJ6ZKu5qC35byPICovDQouZWwtYnV0dG9uLS1zdWNjZXNzIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHVibGljU3ViQ29sb3IpOw0KICBib3JkZXItY29sb3I6IHZhcigtLXB1YmxpY01haW5Db2xvcik7DQogIGNvbG9yOiAjMzMzOw0KICBoZWlnaHQ6IDMycHg7DQogIGZvbnQtc2l6ZTogMTRweDsNCiAgYm9yZGVyLXdpZHRoOiAxcHg7DQogIGJvcmRlci1yYWRpdXM6IDRweDsNCn0NCg0KLyog5Li76KaB5oyJ6ZKu5qC35byPICovDQouZWwtYnV0dG9uLS1wcmltYXJ5IHsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHVibGljU3ViQ29sb3IpOw0KICBib3JkZXItY29sb3I6IHZhcigtLXB1YmxpY01haW5Db2xvcik7DQogIGNvbG9yOiAjMzMzOw0KICBoZWlnaHQ6IDMycHg7DQogIGZvbnQtc2l6ZTogMTRweDsNCiAgYm9yZGVyLXdpZHRoOiAxcHg7DQogIGJvcmRlci1yYWRpdXM6IDRweDsNCn0NCg0KLyog5Y2x6Zmp5oyJ6ZKu5qC35byPICovDQouZWwtYnV0dG9uLS1kYW5nZXIgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wdWJsaWNTdWJDb2xvcik7DQogIGJvcmRlci1jb2xvcjogdmFyKC0tcHVibGljTWFpbkNvbG9yKTsNCiAgY29sb3I6ICMzMzM7DQogIGhlaWdodDogMzJweDsNCiAgZm9udC1zaXplOiAxNHB4Ow0KICBib3JkZXItd2lkdGg6IDFweDsNCiAgYm9yZGVyLXJhZGl1czogNHB4Ow0KfQ0KDQovKiDmjInpkq7pgJrnlKjmoLflvI8gKi8NCi5lbC1idXR0b24gew0KICBtYXJnaW46IDAgNXB4Ow0KICBwYWRkaW5nOiA3cHggMTJweDsNCn0NCg0KLyog5YiG6aG15qC35byPICovDQoucGFnaW5hdGlvbi1jb250ZW50IHsNCiAgbWFyZ2luLXRvcDogMTVweDsNCiAgcGFkZGluZzogMTBweCAwOw0KICB0ZXh0LWFsaWduOiByaWdodDsNCn0NCg0KLyog5rOo6YeK5o6J55qE6L6T5YWl5qGG5qC35byP77yM5Y+v5qC55o2u6ZyA6KaB5ZCv55SoICovDQovKiDovpPlhaXmoYbmoLflvI8NCi5mb3JtLWNvbnRlbnQgPj4+IC5lbC1pbnB1dF9faW5uZXIgew0KICBoZWlnaHQ6IDM2cHg7DQogIGxpbmUtaGVpZ2h0OiAzNnB4Ow0KICBjb2xvcjogIzMzMzsNCiAgZm9udC1zaXplOiAxNHB4Ow0KICBib3JkZXItd2lkdGg6IDFweDsNCiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsNCiAgYm9yZGVyLWNvbG9yOiAjRENERkU2Ow0KICBib3JkZXItcmFkaXVzOiA0cHg7DQogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQp9DQoNCi5mb3JtLWNvbnRlbnQgPj4+IC5lbC1mb3JtLWl0ZW1fX2xhYmVsIHsNCiAgY29sb3I6ICM2MDYyNjY7DQogIGZvbnQtc2l6ZTogMTRweDsNCiAgbGluZS1oZWlnaHQ6IDM2cHg7DQp9DQoNCi5mb3JtLWNvbnRlbnQgPj4+IC5lbC1pbnB1dF9fcHJlZml4LA0KLmZvcm0tY29udGVudCA+Pj4gLmVsLWlucHV0X19zdWZmaXggew0KICBjb2xvcjogI0MwQzRDQzsNCiAgbGluZS1oZWlnaHQ6IDM2cHg7DQp9Ki8NCg=="},{"version":3,"sources":["list.vue"],"names":[],"mappings":";AA4TA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"list.vue","sourceRoot":"src/views/modules/config","sourcesContent":["<template>\r\n  <!-- 主内容容器 -->\r\n  <div class=\"main-content\">\r\n    <!-- 使用 v-if 指令判断是否显示列表页，showFlag 为 true 时显示 -->\r\n    <div v-if=\"showFlag\" class=\"config-list-container\">\r\n      <!-- 表单部分，使用 Element UI 的表单组件，设置为内联表单，绑定搜索表单数据 -->\r\n      <el-form :inline=\"true\" :model=\"searchForm\" class=\"form-content\">\r\n        <!-- 表单行，用于布局 -->\r\n        <el-row class=\"ad\">\r\n          <!-- 表单元素项 -->\r\n          <el-form-item>\r\n            <!-- 新增按钮，点击调用 addOrUpdateHandler 方法 -->\r\n            <el-button\r\n                type=\"success\"\r\n                icon=\"el-icon-plus\"\r\n                @click=\"addOrUpdateHandler()\"\r\n            >新增</el-button>\r\n            <!-- 删除按钮，当选中的数据项数量小于等于 0 时禁用，点击调用 deleteHandler 方法 -->\r\n            <el-button\r\n                :disabled=\"dataListSelections.length <= 0\"\r\n                type=\"danger\"\r\n                icon=\"el-icon-delete\"\r\n                @click=\"deleteHandler()\"\r\n            >删除</el-button>\r\n          </el-form-item>\r\n        </el-row>\r\n      </el-form>\r\n      <!-- 表格内容容器 -->\r\n      <div class=\"table-content\">\r\n        <!-- Element UI 的表格组件，绑定表格数据，设置加载状态，监听选择项变化事件 -->\r\n        <el-table\r\n            class=\"tables\"\r\n            :data=\"dataList\"\r\n            v-loading=\"dataListLoading\"\r\n            @selection-change=\"selectionChangeHandler\"\r\n            stripe\r\n            border\r\n            fit\r\n            size=\"medium\">\r\n          <!-- 表格选择列，根据 contents.tableSelection 的值决定是否显示 -->\r\n          <el-table-column\r\n              v-if=\"contents.tableSelection\"\r\n              type=\"selection\"\r\n              header-align=\"center\"\r\n              align=\"center\"\r\n              width=\"50\">\r\n          </el-table-column>\r\n          <!-- 注释掉的索引列，可根据需要启用 -->\r\n          <!--<el-table-column\r\n              v-if=\"contents.tableIndex\"\r\n              label=\"索引\"\r\n              type=\"index\"\r\n              width=\"50\"\r\n              header-align=\"center\"\r\n              align=\"center\"/>-->\r\n          <!-- 名称列，显示数据的名称字段 -->\r\n          <el-table-column\r\n              prop=\"name\"\r\n              label=\"名称\"\r\n              header-align=\"center\"\r\n              align=\"center\"\r\n              :show-overflow-tooltip=\"true\">\r\n            <!-- 自定义单元格内容，显示当前行的名称 -->\r\n            <template slot-scope=\"scope\">\r\n              <span>{{scope.row.name}}</span>\r\n            </template>\r\n          </el-table-column>\r\n          <!-- 图片列，显示数据的图片字段 -->\r\n          <el-table-column\r\n              prop=\"value\"\r\n              label=\"图片\"\r\n              header-align=\"center\"\r\n              align=\"center\"\r\n              width=\"200\"\r\n          >\r\n            <!-- 自定义单元格内容，根据图片字段的值显示图片或提示信息 -->\r\n            <template slot-scope=\"scope\">\r\n              <div v-if=\"scope.row.value\">\r\n                <!-- 拼接图片的完整 URL 并显示 -->\r\n                <img :src=\"$base.url+scope.row.value.split(',')[0]\" width=\"100\" height=\"100\">\r\n              </div>\r\n              <div v-else>无图片</div>\r\n            </template>\r\n          </el-table-column>\r\n          <!-- 操作列，固定在表格右侧 -->\r\n          <el-table-column\r\n              label=\"操作\"\r\n              header-align=\"center\"\r\n              align=\"center\"\r\n              width=\"300\"\r\n              fixed=\"right\">\r\n            <!-- 自定义单元格内容，包含详情、修改、删除按钮 -->\r\n            <template slot-scope=\"scope\">\r\n              <!-- 详情按钮，点击调用 addOrUpdateHandler 方法并传递当前行的 ID 和 'info' 参数 -->\r\n              <el-button\r\n                  type=\"success\"\r\n                  size=\"mini\"\r\n                  @click=\"addOrUpdateHandler(scope.row.id,'info')\">\r\n                <i class=\"el-icon-tickets\"></i>详情\r\n              </el-button>\r\n              <!-- 修改按钮，点击调用 addOrUpdateHandler 方法并传递当前行的 ID -->\r\n              <el-button\r\n                  type=\"primary\"\r\n                  size=\"mini\"\r\n                  @click=\"addOrUpdateHandler(scope.row.id)\">\r\n                <i class=\"el-icon-edit\"></i>修改\r\n              </el-button>\r\n              <!-- 删除按钮，点击调用 deleteHandler 方法并传递当前行的 ID -->\r\n              <el-button\r\n                  type=\"danger\"\r\n                  size=\"mini\"\r\n                  @click=\"deleteHandler(scope.row.id)\">\r\n                <i class=\"el-icon-delete\"></i>删除\r\n              </el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n        <!-- 分页组件，监听每页数量变化和当前页码变化事件 -->\r\n        <el-pagination\r\n            class=\"pagination-content\"\r\n            @size-change=\"sizeChangeHandle\"\r\n            @current-change=\"currentChangeHandle\"\r\n            :current-page=\"pageIndex\"\r\n            :page-sizes=\"[10, 20, 50, 100]\"\r\n            :page-size=\"Number(contents.pageEachNum)\"\r\n            :total=\"totalPage\"\r\n            layout=\"total, sizes, prev, pager, next, jumper\"\r\n            background>\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n    <!-- 添加/修改页面，根据 addOrUpdateFlag 的值决定是否显示，传递父组件实例并设置引用 -->\r\n    <add-or-update v-if=\"addOrUpdateFlag\" :parent=\"this\" ref=\"addOrUpdate\"></add-or-update>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入添加/修改组件\r\nimport AddOrUpdate from \"./add-or-update.vue\";\r\n\r\nexport default {\r\n  // 注册组件\r\n  components: {\r\n    AddOrUpdate,\r\n  },\r\n  // 组件的数据\r\n  data() {\r\n    return {\r\n      // 搜索表单数据\r\n      searchForm: {\r\n        name: \"\"\r\n      },\r\n      // 表格数据列表\r\n      dataList: [],\r\n      // 当前页码\r\n      pageIndex: 1,\r\n      // 每页显示数量\r\n      pageSize: 10,\r\n      // 总记录数\r\n      totalPage: 0,\r\n      // 表格数据加载状态\r\n      dataListLoading: false,\r\n      // 选中的数据项列表\r\n      dataListSelections: [],\r\n      // 是否显示列表页的标志\r\n      showFlag: true,\r\n      // 是否显示添加/修改页面的标志\r\n      addOrUpdateFlag: false,\r\n      // 表格配置项\r\n      contents: {\r\n        // 是否显示表格选择列\r\n        tableSelection: true,\r\n        // 是否显示表格索引列\r\n        tableIndex: true,\r\n        // 每页显示数量\r\n        pageEachNum: 10\r\n      }\r\n    };\r\n  },\r\n  // 组件创建完成后调用的钩子函数，获取数据列表\r\n  created() {\r\n    this.getDataList();\r\n  },\r\n  // 组件的方法\r\n  methods: {\r\n    // 获取数据列表的方法\r\n    getDataList() {\r\n      // 设置表格数据加载状态为 true\r\n      this.dataListLoading = true;\r\n      // 定义请求参数\r\n      let params = {\r\n        // 当前页码\r\n        page: this.pageIndex,\r\n        // 每页显示数量\r\n        limit: this.pageSize,\r\n        // 排序字段\r\n        sort: 'id',\r\n      };\r\n\r\n      // 如果搜索表单中的名称字段有值，添加到请求参数中\r\n      if(this.searchForm.name) {\r\n        params['name'] = '%' + this.searchForm.name + '%';\r\n      }\r\n\r\n      // 发送 HTTP 请求获取数据列表\r\n      this.$http({\r\n        url: \"config/page\",\r\n        method: \"get\",\r\n        params: params\r\n      }).then(({ data }) => {\r\n        // 如果响应数据存在且状态码为 0\r\n        if (data && data.code === 0) {\r\n          // 更新表格数据列表\r\n          this.dataList = data.data.list;\r\n          // 更新总记录数\r\n          this.totalPage = data.data.total;\r\n        } else {\r\n          // 清空表格数据列表\r\n          this.dataList = [];\r\n          // 总记录数设为 0\r\n          this.totalPage = 0;\r\n        }\r\n        // 设置表格数据加载状态为 false\r\n        this.dataListLoading = false;\r\n      });\r\n    },\r\n\r\n    // 每页数量变化时的处理方法\r\n    sizeChangeHandle(val) {\r\n      // 更新每页显示数量\r\n      this.pageSize = val;\r\n      // 当前页码重置为 1\r\n      this.pageIndex = 1;\r\n      // 重新获取数据列表\r\n      this.getDataList();\r\n    },\r\n\r\n    // 当前页码变化时的处理方法\r\n    currentChangeHandle(val) {\r\n      // 更新当前页码\r\n      this.pageIndex = val;\r\n      // 重新获取数据列表\r\n      this.getDataList();\r\n    },\r\n\r\n    // 表格选择项变化时的处理方法\r\n    selectionChangeHandler(val) {\r\n      // 更新选中的数据项列表\r\n      this.dataListSelections = val;\r\n    },\r\n\r\n    // 添加/修改的处理方法\r\n    addOrUpdateHandler(id, type) {\r\n      // 隐藏列表页\r\n      this.showFlag = false;\r\n      // 显示添加/修改页面\r\n      this.addOrUpdateFlag = true;\r\n      // 在下一次 DOM 更新循环结束之后执行延迟回调\r\n      this.$nextTick(() => {\r\n        // 调用添加/修改组件的 init 方法进行初始化\r\n        this.$refs.addOrUpdate.init(id, type || 'else');\r\n      });\r\n    },\r\n\r\n    // 删除的处理方法\r\n    deleteHandler(id) {\r\n      // 获取要删除的 ID 列表\r\n      var ids = id\r\n          ? [Number(id)]\r\n          : this.dataListSelections.map(item => {\r\n            return Number(item.id);\r\n          });\r\n\r\n      // 弹出确认框，确认是否进行删除操作\r\n      this.$confirm(`确定进行[${id ? \"删除\" : \"批量删除\"}]操作?`, \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      }).then(() => {\r\n        // 发送 HTTP 请求进行删除操作\r\n        this.$http({\r\n          url: \"config/delete\",\r\n          method: \"post\",\r\n          data: ids\r\n        }).then(({ data }) => {\r\n          // 如果响应数据存在且状态码为 0\r\n          if (data && data.code === 0) {\r\n            // 显示成功提示信息，提示信息消失后重新获取数据列表\r\n            this.$message({\r\n              message: \"操作成功\",\r\n              type: \"success\",\r\n              duration: 1500,\r\n              onClose: () => {\r\n                this.getDataList();\r\n              }\r\n            });\r\n          } else {\r\n            // 显示错误提示信息\r\n            this.$message.error(data.msg);\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    // 搜索的处理方法\r\n    search() {\r\n      // 当前页码重置为 1\r\n      this.pageIndex = 1;\r\n      // 重新获取数据列表\r\n      this.getDataList();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 主内容容器样式 */\r\n.main-content {\r\n  padding: 20px;\r\n  background-color: #f5f5f5;\r\n  min-height: calc(100vh - 84px);\r\n}\r\n\r\n/* 表单内容样式 */\r\n.form-content {\r\n  padding: 20px;\r\n  background-color: #FFFDF1;\r\n  box-shadow: 0 0 6px rgba(0,0,0,0.1);\r\n  border-radius: 6px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* 表单行样式 */\r\n.ad {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n\r\n/* 表格内容样式 */\r\n.table-content {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 6px;\r\n  box-shadow: 0 0 6px rgba(0,0,0,0.1);\r\n}\r\n\r\n/* 表格样式 */\r\n.tables {\r\n  width: 100%;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 表格表头样式 */\r\n.tables >>> .el-table__header th {\r\n  background-color: var(--publicSubColor);\r\n  color: #fff !important;\r\n  font-weight: bold;\r\n}\r\n\r\n/* 表格奇数行样式 */\r\n.tables >>> .el-table__body tr:nth-child(odd) {\r\n  background-color: rgba(184, 230, 253, 0.78);\r\n}\r\n\r\n/* 表格行悬停样式 */\r\n.tables >>> .el-table__body tr:hover td {\r\n  background-color: var(--publicSubColor) !important;\r\n  color: #333 !important;\r\n}\r\n\r\n/* 表格单元格样式 */\r\n.tables >>> .el-table__body td {\r\n  padding: 8px 0;\r\n}\r\n\r\n/* 成功按钮样式 */\r\n.el-button--success {\r\n  background-color: var(--publicSubColor);\r\n  border-color: var(--publicMainColor);\r\n  color: #333;\r\n  height: 32px;\r\n  font-size: 14px;\r\n  border-width: 1px;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 主要按钮样式 */\r\n.el-button--primary {\r\n  background-color: var(--publicSubColor);\r\n  border-color: var(--publicMainColor);\r\n  color: #333;\r\n  height: 32px;\r\n  font-size: 14px;\r\n  border-width: 1px;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 危险按钮样式 */\r\n.el-button--danger {\r\n  background-color: var(--publicSubColor);\r\n  border-color: var(--publicMainColor);\r\n  color: #333;\r\n  height: 32px;\r\n  font-size: 14px;\r\n  border-width: 1px;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 按钮通用样式 */\r\n.el-button {\r\n  margin: 0 5px;\r\n  padding: 7px 12px;\r\n}\r\n\r\n/* 分页样式 */\r\n.pagination-content {\r\n  margin-top: 15px;\r\n  padding: 10px 0;\r\n  text-align: right;\r\n}\r\n\r\n/* 注释掉的输入框样式，可根据需要启用 */\r\n/* 输入框样式\r\n.form-content >>> .el-input__inner {\r\n  height: 36px;\r\n  line-height: 36px;\r\n  color: #333;\r\n  font-size: 14px;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-color: #DCDFE6;\r\n  border-radius: 4px;\r\n  background-color: #fff;\r\n}\r\n\r\n.form-content >>> .el-form-item__label {\r\n  color: #606266;\r\n  font-size: 14px;\r\n  line-height: 36px;\r\n}\r\n\r\n.form-content >>> .el-input__prefix,\r\n.form-content >>> .el-input__suffix {\r\n  color: #C0C4CC;\r\n  line-height: 36px;\r\n}*/\r\n</style>"]}]}